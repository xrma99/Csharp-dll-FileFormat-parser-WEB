@model IEnumerable<FileUpload.Models.Section>

@{
    ViewData["Title"] = "Index";
}
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.4.1/jspdf.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/2.3.5/jspdf.plugin.autotable.min.js"></script>
<script src="~/js/site.js"></script>
<script src="~/js/jsfiles/pdfmake.min.js"></script>
<script src="~/js/jsfiles/html2canvas.min.js"></script>

<div id="pdftarget">
    <h2 style="text-align:center"><strong>Parse Result</strong></h2>
    <p style="text-align:center">@ViewData["name"]</p>
    <br />

    <div>
        <p><strong>MZ Header</strong></p>
        <p>
            Magic id:
            @foreach (Byte part in ViewBag.MZid)
            {
                @part.ToString("X2");
            }
        </p>
        <p>
            Header size:
            @foreach (Byte part in ViewBag.MZsize)
            {
                @part.ToString("X2");
            }
            paragraphs (16 bytes /paragraph)
        </p>
    </div>
    <br />

    <div>
        <p><strong>Default area</strong></p>
        <p>@ViewBag.info</p>
    </div>
    <br />

    <div>
        <p><strong>PE Header</strong></p>
        <p>
            Magic id:
            @foreach (Byte part in ViewBag.PEid)
            {
                @part.ToString("X2");
            }
        </p>
        <p>
            Machine Type:
            @foreach (Byte part in ViewBag.MachineType)
            {
                @part.ToString("X2");
            }
        </p>
        <p>
            Section Amount:
            @foreach (Byte part in ViewBag.sectionamount)
            {
                @part.ToString("X2");
            }
        </p>
    </div>
    <br />


</div>


<h3>Section</h3>

<table id="example" class="table" style="table-layout:fixed; width:100%">
    <thead>
        <tr>
            <th style="width:8%">
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th style="width:10%">
                @Html.DisplayNameFor(model => model.Size)
            </th>
            <th style="width:10%">
                @Html.DisplayNameFor(model => model.Vaddr)
            </th>
            <th style="width:10%">
                @Html.DisplayNameFor(model => model.Total_sz)
            </th>
            <th style="width:62%">
                @Html.DisplayNameFor(model => model.content)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @foreach (byte part in item.Size)
                    {
                        @part.ToString("X2")
                    }
                    @Html.DisplayFor(modelItem => item.Size)
                </td>
                <td>
                    @foreach (byte part in item.Vaddr)
                    {
                        @part.ToString("X2")
                    }
                </td>
                <td>
                    @foreach (byte part in item.Total_sz)
                    {
                        @part.ToString("X2")
                    }
                </td>
                <td style="word-wrap:break-word">
                    @foreach (byte part in item.content)
                    {
                        @part.ToString("X2")
                    }
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                </td>
            </tr>
        }
    </tbody>
</table>


<a href="/Sections/PDFguide" target="_blank">Guide to get a full PDF</a>

<a asp-action="ExportPDF" asp-route-srcurl="Dude" style="float:right">Export this page to pdf file</a>
<br />
<input type="button" id="btnExport" value="Export headers to PDF" onclick="Export()" class="auto-style5" />
<button id="pdf" class="btn btn-danger">Export Section Content to PDF</button>

<script>
    $('#pdf').click(function () {
        alert("chuck");
        var options = {
            separator: ',',
            newline: '\r\n',
            ignoreColumns: '',
            ignoreRows: '',
            type: 'pdf',
            htmlContent: false,
            consoleLog: false,
            trimContent: true,
            quoteFields: true,
            filename: 'sample.pdf',
            utf8BOM: true
        };

        function quote(text) {
            return '"' + text.replace('"', '""') + '"';
        }


        function parseString(data) {

            if (options.htmlContent) {
                content_data = data.html().trim();
            } else {
                content_data = data.text().trim();
            }
            return content_data;
        }



        function toJson(el) {

            var jsonHeaderArray = [];
            $(el).find('thead').find('tr').not(options.ignoreRows).each(function () {
                var tdData = "";
                var jsonArrayTd = [];

                $(this).find('th').not(options.ignoreColumns).each(function (index, data) {
                    if ($(this).css('display') != 'none') {
                        jsonArrayTd.push(parseString($(this)));
                    }
                });
                jsonHeaderArray.push(jsonArrayTd);

            });

            var jsonArray = [];
            $(el).find('tbody').find('tr').not(options.ignoreRows).each(function () {
                var tdData = "";
                var jsonArrayTd = [];

                $(this).find('td').not(options.ignoreColumns).each(function (index, data) {
                    if ($(this).css('display') != 'none') {
                        jsonArrayTd.push(parseString($(this)));
                    }
                });
                jsonArray.push(jsonArrayTd);

            });


            return { header: jsonHeaderArray[0], data: jsonArray };
        }

        var el = '#example';
        

        var jsonExportArray = toJson(el);

        if (options.consoleLog) {//default: false
            console.log(jsonExportArray);
        }

        var doc = new jsPDF('p', 'pt');//(orientation, unit, format, compress);
        doc.autoTable(jsonExportArray.header, jsonExportArray.data);
        doc.save(options.filename);

                
        return this;

    })
</script>


<script>
    function Export() {
        html2canvas(document.getElementById('pdftarget'), {
            onrendered: function (canvas) {
                var data = canvas.toDataURL();
                var docDefinition = { content: [{ image: data, width: 500 }] };
                pdfMake.createPdf(docDefinition).download("result.pdf");
                alert("Downloading Started");
            }
        });
    }

</script>

